# bot.py ‚Äî –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç Oplati Pay

import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
from config import BOT_TOKEN, CARD_NUMBER, USD_MARKUP, ADMIN_USERNAME, ADMIN_CHAT_ID, LOG_FILE, RECEIPTS_DIR
from currency import get_usd_rate
from excel_utils import init_excel, save_order, get_stats
import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
WELCOME, COUNTRY_SERVICE, AMOUNT, RECEIPT = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel
init_excel()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    context.user_data.clear()
    context.user_data.update({
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name
    })
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç *Oplati Pay* –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
        "`–°—Ç—Ä–∞–Ω–∞: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã]`\n"
        "`–°–µ—Ä–≤–∏—Å: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞]`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n`–°—Ç—Ä–∞–Ω–∞: –ì–µ—Ä–º–∞–Ω–∏—è`\n`–°–µ—Ä–≤–∏—Å: Netflix`",
        parse_mode="Markdown"
    )
    return COUNTRY_SERVICE

async def process_country_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ —Å–µ—Ä–≤–∏—Å–∞"""
    text = update.message.text
    user_data = context.user_data
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞
    try:
        lines = [line.strip() for line in text.split("\n") if line.strip()]
        country = None
        service = None
        
        for line in lines:
            if line.lower().startswith("—Å—Ç—Ä–∞–Ω–∞:"):
                country = line.split(":", 1)[1].strip()
            elif line.lower().startswith("—Å–µ—Ä–≤–∏—Å:"):
                service = line.split(":", 1)[1].strip()
        
        if not country or not service:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã
        if not country.replace(" ", "").isalpha():
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.")
            return COUNTRY_SERVICE
        
        user_data["country"] = country
        user_data["service"] = service
        
        await update.message.reply_text(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã:\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: *{country}*\n"
            f"üîß –°–µ—Ä–≤–∏—Å: *{service}*\n\n"
            "üíµ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –≤ USD:",
            parse_mode="Markdown"
        )
        return AMOUNT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã/—Å–µ—Ä–≤–∏—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "`–°—Ç—Ä–∞–Ω–∞: [–ù–∞–∑–≤–∞–Ω–∏–µ]`\n`–°–µ—Ä–≤–∏—Å: [–ù–∞–∑–≤–∞–Ω–∏–µ]`",
            parse_mode="Markdown"
        )
        return COUNTRY_SERVICE

async def process_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        amount_usd = float(update.message.text.replace(",", "."))
        if amount_usd <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å
        base_rate = get_usd_rate()
        if base_rate is None:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
        
        rate_with_markup = round(base_rate * (1 + USD_MARKUP), 2)
        amount_rub = round(amount_usd * rate_with_markup, 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.update({
            "amount_usd": amount_usd,
            "amount_rub": amount_rub,
            "rate": rate_with_markup,
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        payment_msg = (
            f"üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{CARD_NUMBER}`\n"
            f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{amount_usd:.2f} USD*\n"
            f"üìà –ö—É—Ä—Å : *{rate_with_markup} ‚ÇΩ/USD*\n"
            f"üí∏ –ò—Ç–æ–≥–æ: *{amount_rub:.2f} ‚ÇΩ*\n\n"
            "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF —á–µ–∫–∞"
        )
        
        await update.message.reply_text(payment_msg, parse_mode="Markdown")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        save_order(context.user_data)
        
        return RECEIPT
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.00)")
        return AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END

async def process_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ"""
    user = update.effective_user
    user_data = context.user_data
    
    if not user_data:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return ConversationHandler.END
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if update.message.document:
            file = update.message.document
            ext = os.path.splitext(file.file_name)[1] or ".pdf"
        elif update.message.photo:
            file = update.message.photo[-1]
            ext = ".jpg"
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞")
            return RECEIPT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        receipt_path = os.path.join(RECEIPTS_DIR, f"receipt_{user.id}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}{ext}")
        receipt_file = await file.get_file()
        await receipt_file.download_to_drive(receipt_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_msg = (
            f"üì• *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name}\n"
            f"üÜî ID: `{user.id}`\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: *{user_data['country']}*\n"
            f"üîß –°–µ—Ä–≤–∏—Å: *{user_data['service']}*\n"
            f"üíµ –°—É–º–º–∞: *{user_data['amount_usd']:.2f} USD*\n"
            f"üí∏ –°—É–º–º–∞ RUB: *{user_data['amount_rub']:.2f} ‚ÇΩ*\n"
            f"üìÖ –î–∞—Ç–∞: {user_data['date']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_msg,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
        if update.message.document:
            await context.bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=file.file_id,
                caption=f"–ß–µ–∫ –æ—Ç @{user.username}"
            )
        else:
            await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=file.file_id,
                caption=f"–ß–µ–∫ –æ—Ç @{user.username}"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–µ
        save_order(user_data, status="–û–ø–ª–∞—á–µ–Ω–æ")
        
        # –§–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä @ShipovM —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.")
        return RECEIPT

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    total = get_stats()
    await update.message.reply_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
        f"–í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ: *{total:.2f} ‚ÇΩ*",
        parse_mode="Markdown"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            COUNTRY_SERVICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_country_service)
            ],
            AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_amount)
            ],
            RECEIPT: [
                MessageHandler(filters.PHOTO | filters.Document.PDF, process_receipt),
                MessageHandler(filters.ALL, 
                    lambda update, _: update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞"))
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", stats))
    
    application.run_polling()

if __name__ == "__main__":
    main()